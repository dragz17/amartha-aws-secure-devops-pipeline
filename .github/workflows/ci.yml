name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Get Node.js Executable Path
      run: |
        echo "NODE_EXEC_PATH=$(which node)" >> $GITHUB_ENV
      shell: bash

    - name: Install Dependencies
      run: npm ci

    - name: Load Security Config Exclusions
      run: |
        EXCLUSIONS_PATHS=$(jq -r '.security.exclusions.paths[]' config/security-config.json | paste -sd, -)
        EXCLUSIONS_VULNS=$(jq -r '.security.exclusions.vulnerabilities[]?' config/security-config.json | paste -sd, -)
        DEPCHECK_ENABLED=$(jq -r '.security.dependencyCheck.enabled' config/security-config.json)
        SAST_ENABLED=$(jq -r '.security.staticAnalysis.enabled' config/security-config.json)
        
        echo "SECURITY_EXCLUSIONS_PATHS=${EXCLUSIONS_PATHS}" >> $GITHUB_ENV
        echo "SECURITY_EXCLUSIONS_VULNS=${EXCLUSIONS_VULNS}" >> $GITHUB_ENV
        echo "DEPCHECK_ENABLED=${DEPCHECK_ENABLED}" >> $GITHUB_ENV
        echo "SAST_ENABLED=${SAST_ENABLED}" >> $GITHUB_ENV
      shell: bash

    - name: Create .trivyignore file
      if: ${{ env.SECURITY_EXCLUSIONS_VULNS != '' }}
      run: |
        echo "${{ env.SECURITY_EXCLUSIONS_VULNS }}" | tr ',' '\n' > .trivyignore
        echo "Generated .trivyignore content:"
        cat .trivyignore
      shell: bash

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0
      if: ${{ env.SAST_ENABLED == 'true' }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.organization=github-devsecops-pipeline
          -Dsonar.projectKey=github-devsecops-pipeline
          -Dsonar.sources=.
          -Dsonar.exclusions=${{ env.SECURITY_EXCLUSIONS_PATHS }}
          -Dsonar.nodejs.executable=${{ env.NODE_EXEC_PATH }}

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      if: ${{ env.DEPCHECK_ENABLED == 'true' }}
      with:
        project: 'amartha-devsecops'
        path: '.' # Scan the entire repository directory
        format: 'HTML'
        out: 'owasp-reports' # Output directory for reports
        args: '--failOnCVSS 7' # Fail on HIGH or CRITICAL vulnerabilities

    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: owasp-reports/dependency-check-report.html

    - name: Run Security Unit Tests
      run: npm run test:security

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/amartha-devsecops-sample:${{ github.run_number }}
          ${{ secrets.DOCKER_USERNAME }}/amartha-devsecops-sample:latest

    - name: Run Trivy Scan on Docker Image
      id: trivy_scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/amartha-devsecops-sample:latest
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy Scan Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-report
        path: trivy-results.json

    - name: Push Docker Image to Registry
      if: steps.trivy_scan.conclusion == 'success'
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/amartha-devsecops-sample:${{ github.run_number }}
        docker push ${{ secrets.DOCKER_USERNAME }}/amartha-devsecops-sample:latest

    - name: Send Slack Notification
      uses: slackapi/slack-github-action@v2.1.0
      if: always()
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: 'incoming-webhook'
        payload: "{\"text\": \"CI/CD Pipeline Run ${{ github.run_number }} status: ${{ job.status }}.\\nRepository: ${{ github.repository }}.\\nBranch: ${{ github.ref_name }}.\\nCommit: ${{ github.sha }}.\\nCheck workflow run and view reports here: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run & Artifacts>\"}"

    # Next steps will go here 